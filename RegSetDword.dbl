;****************************************************************************
;
; Title:        RegSetDword.dbl
;
; Author:       Steve Ives (Synergex Professional Services Group)
;
; Date:         9th June 1999
;
; Description:  This routine sets a REG_DWORD (4-byte integer, i4) value in
;               the specified key in the Registry.  If the value is not found,
;               it will be created. If the key (or parent keys) are not found,
;               they will be created.  In other words, this routine can create
;               a new value, several levels deep in a totally new heirarchy
;               in the Registry.
;
; Platforms:    32-bit Microsoft Windows platforms only.
;
; Warning:      The operation and reliability of a Windows system depends on
;               the integrity of the Registry.  Inappropriate use of this
;               routine could result in serious damage to the registry.
;               Please exercise extreme caution when using this routine.
;
;****************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
;****************************************************************************

.function RegSetDword, ^VAL

;Argument list

    a_reghdl    ,n      ;Registry handle    (Returned by RegStartSession)
    a_hive      ,n      ;Registry hive      (e.g. HKEY_LOCAL_MACHINE)
    a_key       ,a      ;Path below hive    (e.g. "Software\SomeCompany\SomeProduct")
    a_value     ,a      ;Value name         (e.g. "AllowPosting")
    a_data      ,n      ;Value data         (e.g. 1)
    a_flush     ,n      ;(Optional) flush   (flush to disk after set)

;End of argument list

.define REGISTRY_INTERNAL
.include "INC:registry.def"

.align
    stack record
        status      ,i4     ;Return status
        kh          ,i4     ;Handle to currently open key
        type        ,i4     ;Value type to be created (REG_SZ)
        size        ,i4     ;Size of data, including terminating null
        null        ,i4     ;A null (binary 0
        data        ,i4     ;Value to set (from a_data)
        key         ,a255   ;a_key  in null-terminated string
        value       ,a255   ;a_value  in null-terminated string

.proc

    status = REG_SUCCESS

    xcall fill(%char(0),key)
    key(1:%trim(a_key)) = a_key

    ;Create new key
    if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegCreateKeyA",a_hive,^addr(key),^addr(kh))) then
        status = REG_ERR_CREKEY
    else
    begin
        xcall fill(%char(0),value)
        value(1:%trim(a_value)) = a_value

        type = REG_DWORD
        size = 4
        data = a_data

        ;Set value of new key
        if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegSetValueExA",kh,^addr(value),null,type,^addr(data),size))
            status = REG_ERR_SETVAL

        ;Flush to disk
        if (^passed(a_flush).and.(a_flush.eq.REG_FLUSH))
            if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegFlushKey",kh))
                status = REG_ERR_FLUSH

        ;Close new key
        if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegCloseKey",kh))
            status = REG_ERR_CLSKEY
    end

    freturn status

.end


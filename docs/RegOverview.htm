<html>

<head>
<title>Windows Registry Overview</title>
</head>

<body bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#0000FF" alink="#FF0000">

<h3 align="right"><font face="Arial"><a href="default.htm">Home</a></font></h3>

<h1><font face="Arial">Windows Registry Overview</font></h1>

<p><font face="Arial">The <i>registry</i> is a system-defined database that applications
and system components use to store and retrieve configuration data. The registry stores
data in binary files. To manipulate registry data, an application must use the registry
functions. This overview describes the registry and the functions that applications use to
access and manipulate the data stored there. The data stored in the registry varies
according to the platform that is used. This overview contains a description of registry
entries that can exist on any platform.</font></p>

<h2><font face="Arial">Structure of the Registry</font></h2>

<p><font face="Arial">The registry stores data in a hierarchically structured tree. Each
node in the tree is called a <i>key</i>. Each key can contain both <i>subkeys</i> and data
entries called <i>values</i>. Sometimes, the presence of a key is all the data that an
application requires; other times, an application opens a key and uses the values
associated with the key. A key can have any number of values, and the values can be in any
form. </font></p>

<p><font face="Arial">Each key has a name consisting of one or more printable ANSI
characters &#151; that is, characters ranging from values 32 through 127. Key names cannot
include a space, a backslash (\), or a wildcard character (* or ?). Key names beginning
with a period (.) are reserved. The name of each subkey is unique with respect to the key
that is immediately above it in the hierarchy. Key names are not localized into other
languages, although values may be.</font></p>

<h2><font face="Arial">Registry Storage Space</font></h2>

<p><font face="Arial">Although there are few technical limits to the type and size of data
an application can store in the registry, certain practical guidelines exist to promote
system efficiency. An application should store configuration and initialization data in
the registry, but other kinds of data should be stored elsewhere. </font></p>

<p><font face="Arial">Generally, data consisting of more than one or two kilobytes (K)
should be stored as a file and referred to by using a key in the registry rather than
being stored as a value. Instead of duplicating large pieces of data in the registry, an
application should save the data as a file and refer to the file. Executable binary code
should never be stored in the registry.</font></p>

<p><font face="Arial">A value entry uses much less registry space than a key. To save
space, an application should group similar data together as a structure and store the
structure as a value rather than storing each of the structure members as a separate key.
(Storing the data in binary form allows an application to store data in one value that
would otherwise be made up of several incompatible types.)</font></p>

<h2><font face="Arial">Predefined Keys</font></h2>

<p><font face="Arial">An application must open a key before it can add data to the
registry. To open a key, an application must supply a handle to another key in the
registry that is already open. The system defines standard handles that are always open.
An application can use these predefined handles as entry points to the registry. </font></p>

<p><font face="Arial">The system provides two predefined keys at the root of the registry:
<b>HKEY_LOCAL_MACHINE</b> and <b>HKEY_USERS</b>. In addition, the system defines <b>HKEY_CLASSES_ROOT</b>
(a subkey of <b>HKEY_LOCAL_MACHINE</b>) and <b>HKEY_CURRENT_USER</b> (a subkey of <b>HKEY_USERS</b>).
These registry handles are valid for all Win32 implementations of the registry, although
the use of the handles may vary from platform to platform. In addition, other predefined
handles have been defined for specific platforms. </font></p>

<p><font face="Arial">Predefined keys help an application navigate in the registry and
make it possible to develop tools that allow a system administrator to manipulate
categories of data. Applications that add data to the registry should always work within
the framework of predefined keys, so administrative tools can find and use the new data. </font></p>

<p><font face="Arial">The following predefined keys are used as entry points to the
registry.</font></p>

<table cellSpacing="4" cols="2">
<TBODY>
  <tr vAlign="top">
    <th align="left" width="44%"><font face="Arial">Entry point</font></th>
    <th align="left" width="56%"><font face="Arial">Use</font></th>
  </tr>
  <tr vAlign="top">
    <td width="44%"><font face="Arial"><b>HKEY_CLASSES_ROOT</b></font></td>
    <td width="56%"><font face="Arial">Registry entries subordinate to this key define types
    (or classes) of documents and the properties associated with those types. Data stored
    under this key is used by shell applications and by object linking and embedding (OLE)
    applications. </font></td>
  </tr>
  <tr vAlign="top">
    <td width="44%"><font face="Arial"><b>HKEY_CURRENT_USER</b></font></td>
    <td width="56%"><font face="Arial">Registry entries subordinate to this key define the
    preferences of the current user. These preferences include the settings of environment
    variables, data about program groups, colors, printers, network connections, and
    application preferences.</font></td>
  </tr>
  <tr vAlign="top">
    <td width="44%"><font face="Arial"><b>HKEY_DYN_DATA</b></font></td>
    <td width="56%"><font face="Arial"><b>Windows 95 and Windows 98:</b> Registry entries
    subordinate to this key allow you to collect performance data. </font></td>
  </tr>
  <tr vAlign="top">
    <td width="44%"><font face="Arial"><b>HKEY_LOCAL_MACHINE</b></font></td>
    <td width="56%"><font face="Arial">Registry entries subordinate to this key define the
    physical state of the computer, including data about the bus type, system memory, and
    installed hardware and software. </font></td>
  </tr>
  <tr vAlign="top">
    <td width="44%"><font face="Arial"><b>HKEY_PERFORMANCE_DATA</b></font></td>
    <td width="56%"><font face="Arial"><b>Windows NT:</b> Registry entries subordinate to this
    key allow you to access performance data. The data is not actually stored in the registry;
    the registry functions cause the system to collect the data from its source.</font></td>
  </tr>
  <tr vAlign="top">
    <td width="44%"><font face="Arial"><b>HKEY_USERS</b></font></td>
    <td width="56%"><font face="Arial">Registry entries subordinate to this key define the
    default user configuration for new users on the local computer and the user configuration
    for the current user. </font></td>
  </tr>
</TBODY>
</table>

<p><font face="Arial">The use of <b>HKEY_CURRENT_USER</b>, <b>HKEY_LOCAL_MACHINE</b>, and <b>HKEY_USERS</b>
varies depending on the implementation of the registry. </font></p>

<h2><font face="Arial">Categories of Data</font></h2>

<p><font face="Arial">Before putting data into the registry, an application should divide
the data into two categories: computer-specific data and user-specific data. By making
this distinction, an application can support multiple users, and yet locate user-specific
data over a network and use that data in different locations, allowing
location-independent user profile data. (A user profile is a set of configuration data
saved for every user.)</font></p>

<p><font face="Arial">When the application is installed, it should record the
computer-specific data under the <b>HKEY_LOCAL_MACHINE</b> key. In particular, it should
create keys for the company name, product name, and version number, as shown in the
following example: </font></p>

<pre><font face="Arial"><code><b>HKEY_LOCAL_MACHINE</b>\<b>Software</b>\MyCompany\MyProduct\1.0 ...
 </code></font></pre>

<p><font face="Arial">An application should record user-specific data under the <b>HKEY_CURRENT_USER</b>
key, as shown in the following example: </font></p>

<pre><code><b>HKEY_CURRENT_USER</b>\<b>Software</b>\MyCompany\MyProduct\1.0\<i>...<font
face="Arial"> </font></i></code></pre>
</body>
</html>
